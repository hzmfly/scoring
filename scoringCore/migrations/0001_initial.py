# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-06-25 05:37
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.IntegerField()),
                ('section', models.IntegerField()),
                ('tms', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Card_Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addr1', models.CharField(blank=True, max_length=10)),
                ('addr2', models.CharField(blank=True, max_length=10)),
                ('addr3', models.CharField(blank=True, max_length=10)),
                ('addr4', models.CharField(blank=True, max_length=10)),
                ('tms', models.DateTimeField(auto_now=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Card')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.IntegerField()),
                ('section', models.IntegerField()),
                ('grade', models.IntegerField(choices=[(1, '一年级'), (2, '二年级'), (3, '三年级'), (4, '四年级'), (5, '五年级'), (6, '六年级'), (7, '七年级'), (8, '八年级'), (9, '九年级'), (10, '高一'), (11, '高二'), (12, '高三')])),
                ('classes', models.IntegerField()),
                ('school', models.IntegerField()),
                ('submitNum', models.IntegerField()),
                ('rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('school', models.IntegerField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女'), (3, '未知性别')])),
                ('grade', models.IntegerField(choices=[(1, '一年级'), (2, '二年级'), (3, '三年级'), (4, '四年级'), (5, '五年级'), (6, '六年级'), (7, '七年级'), (8, '八年级'), (9, '九年级'), (10, '高一'), (11, '高二'), (12, '高三')])),
                ('classes', models.IntegerField()),
                ('tms', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=400)),
                ('score', models.IntegerField()),
                ('chapter', models.IntegerField()),
                ('section', models.IntegerField()),
                ('grade', models.IntegerField(choices=[(1, '一年级'), (2, '二年级'), (3, '三年级'), (4, '四年级'), (5, '五年级'), (6, '六年级'), (7, '七年级'), (8, '八年级'), (9, '九年级'), (10, '高一'), (11, '高二'), (12, '高三')])),
                ('classes', models.IntegerField()),
                ('school', models.IntegerField()),
                ('tms', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('school', models.IntegerField()),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女'), (3, '未知性别')])),
                ('tms', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher_Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(choices=[(1, '一年级'), (2, '二年级'), (3, '三年级'), (4, '四年级'), (5, '五年级'), (6, '六年级'), (7, '七年级'), (8, '八年级'), (9, '九年级'), (10, '高一'), (11, '高二'), (12, '高三')])),
                ('classes', models.IntegerField()),
                ('school', models.IntegerField(blank=True, null=True)),
                ('subjectCd', models.IntegerField(choices=[(1, '语文'), (2, '数学'), (3, '英语'), (4, '物理'), (5, '化学'), (6, '生物'), (7, '政治'), (8, '地理'), (9, '历史')])),
                ('tms', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Textbook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('textbookName', models.CharField(blank=True, max_length=60)),
                ('publisher', models.CharField(blank=True, max_length=30)),
                ('grade', models.IntegerField(choices=[(1, '一年级'), (2, '二年级'), (3, '三年级'), (4, '四年级'), (5, '五年级'), (6, '六年级'), (7, '七年级'), (8, '八年级'), (9, '九年级'), (10, '高一'), (11, '高二'), (12, '高三')])),
                ('subjectCd', models.IntegerField(choices=[(1, '语文'), (2, '数学'), (3, '英语'), (4, '物理'), (5, '化学'), (6, '生物'), (7, '政治'), (8, '地理'), (9, '历史')])),
                ('semester', models.IntegerField(choices=[(1, '上学期'), (2, '下学期')])),
                ('tms', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Textbook_Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.IntegerField()),
                ('chapterName', models.CharField(max_length=45)),
                ('section', models.IntegerField()),
                ('sectionName', models.CharField(max_length=45)),
                ('topicCount', models.IntegerField()),
                ('textbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.IntegerField()),
                ('chapterName', models.CharField(max_length=45)),
                ('section', models.IntegerField()),
                ('sectionName', models.CharField(max_length=45)),
                ('topicNum', models.IntegerField()),
                ('topicType', models.IntegerField(choices=[(1, '选择题'), (2, '填空题'), (3, '问答题'), (4, '判断题')])),
                ('degree', models.IntegerField()),
                ('question', models.CharField(blank=True, max_length=400)),
                ('answer', models.CharField(max_length=400)),
                ('point', models.IntegerField()),
                ('option', models.CharField(blank=True, max_length=45)),
                ('tms', models.DateTimeField(auto_now=True)),
                ('textbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook')),
            ],
        ),
        migrations.AddField(
            model_name='teacher_classes',
            name='textbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook'),
        ),
        migrations.AddField(
            model_name='task',
            name='textbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook'),
        ),
        migrations.AddField(
            model_name='task',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Topic'),
        ),
        migrations.AddField(
            model_name='scorerate',
            name='textbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook'),
        ),
        migrations.AddField(
            model_name='scorerate',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Topic'),
        ),
        migrations.AddField(
            model_name='card_topic',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Topic'),
        ),
        migrations.AddField(
            model_name='card',
            name='textbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scoringCore.Textbook'),
        ),
        migrations.AlterUniqueTogether(
            name='textbook_section',
            unique_together=set([('textbook', 'chapter', 'section')]),
        ),
        migrations.AlterUniqueTogether(
            name='teacher_classes',
            unique_together=set([('teacher', 'school', 'grade', 'classes', 'textbook')]),
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together=set([('student', 'topic')]),
        ),
        migrations.AlterUniqueTogether(
            name='scorerate',
            unique_together=set([('topic', 'grade', 'school', 'classes')]),
        ),
        migrations.AlterUniqueTogether(
            name='card_topic',
            unique_together=set([('card', 'topic')]),
        ),
    ]
